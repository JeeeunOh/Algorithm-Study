# 정의
 - '정점(노드)'과 간선(엣지)'로 이루어진 자료구조
 - 간선 방향 유무에 따라 '단방향 그래프'와 '무방향 그래프'로 나뉜다.

# 표현
 - 인접 행렬 그래프 vs 인접 리스트
  1. 인접 행렬 그래프 - ' 모든 정보 저장'
    장점 : 직관적이며 쉽게 구현 가능
    단점 : 불필요한 정보 저장 많으며, 그래프 크기 커지면 메모리 초과 발생할 수 있음
    구현 : int형의 2차원 배열을 주로 이용하며, 이동할 수 있으면 1, 없으면 0으로 표기함
    
  2. 인접 리스트 그래프 - ' 갈 수 있는 곳만 저장'
   - 장점 : 필요한 정보만 저장하여 메모리 절약 가능
   - 단점 : 인접행렬에 비해 다소 어려움
   - 구현 : 리스트(List)나 벡터(Vector) 등의 자료구조를 이요하여 각 정점에서 이동가능한 정점들을 저장
      (List나 Vector를 이용한 2차원 배열이라 생각하면 이해하기 쉬움)
      
 # 탐색
 - 탐색 방식 : 너비우선 탐색(BFS), 깊이 우선 탐색(DFS), 다익스트라(Dijkstra), 플로이드 와샬(Floyd Washall)
  1. BFS(Breadth First Search; 너비 우선 탐색) 
    : 현재 정점과 연결된 정점들에 대해 우선적으로 넓게 탐색하는 방식
    : 큐 이용 구현
    : 아래로 깊은 그래프에선 좋은 성능, 옆으로 넓은 그래프에선 시간 많이 걸림
    
  2. DFS(Depth First Search; 깊이 우선 탐색)
    : 현재 정점에서 연결된 정점을 하나 골라 파고들수 있는 최대한 깊게 파고들어가며 탐색
    : 응용 -> 백트래킹
    : 스택 이용 구현 or 시스템 스택(재귀 호출)
    : 옆으로 넓은 그래프에 대해 준수한 성능, 아래로 깊은 그래프 대해 좋은 성능 x
    
  3. 다익스트라(Dijkstra)
    : BFS의 응용 ->   어느 한 정점에서 모든 정점까지의 최단 경로
    : 매 탐색마다 해당 정점까지의 가중치의 합을 최소값으로 갱신
    : 최소 힙(우선순위 큐)
    : 음이 아닌 가중치에 대해서만 사용이 가능
    
  4. 플로이드 와샬(Floyd Washall)알고리즘
    : 플로이드 와샬(Floyd Washall)알고리즘
    : 3중 For문 -> 모든 정점들의 최단거리를 모두 파악할 수 있지만 O(V^3)의 시간
    : 양과 음의 모든 가중치에 대해 계산이 가능 +  4줄밖에 안되는 코드라는 단순함 
    
    
# 탐색 유형
1. 미로 탐색 유형
 : 현재 좌표에서 상, 하, 좌, 우 로 이동(x, y 값을 가감)하면서 길을 찾아나가는 방식
 : 인접행렬 형태로 그래프 주어짐
 : 행렬을 그래프 표기로 이해하려기 보다는 지도나 그림 자체로 바라보는 것이 편하다.

2. 정점 이동 유형
 : 현재 정점에서 인접 정점으로 갈 수 있는지에 대한 정보가 주어짐
 : 인접 행렬(또는 리스트)을 생성 -> 연결된 길을 찾아 탐색
    
    
    
    
    
    
    
    
    
    
    
    
    
